{"version":3,"file":"static/js/38.aeca8c8b.chunk.js","mappings":"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","sources":["components/Page.js","view/pages/Unsplash/PhotoListView/Header.js","others/helpers/InputPhotoOptions.js","view/pages/Unsplash/PhotoListView/Results.js","view/pages/Unsplash/PhotoListView/TableResultsHelpers.js","view/pages/Unsplash/PhotoListView/View.js"],"sourcesContent":["import React, { forwardRef } from \"react\"\nimport { Helmet, HelmetProvider } from \"react-helmet-async\"\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n  return (\n    <div ref={ref} {...rest}>\n      <HelmetProvider>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      </HelmetProvider>\n      {children}\n    </div>\n  )\n})\n\nexport default Page\n","import React from \"react\"\nimport { Link as RouterLink } from \"react-router-dom\"\nimport clsx from \"clsx\"\nimport NavigateNextIcon from  \"@mui/icons-material/NavigateNext\"\nimport {\n  Box,\n  Breadcrumbs,\n  Grid,\n  Link,\n  Typography,\n} from \"@mui/material\"\n\n\nconst Header = ({ className, ...rest }) => {\n  return (\n    <Grid\n      container\n      spacing={3}\n      justify=\"space-between\"\n      className={clsx( className)}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/\"\n            component={RouterLink}\n          >\n            Home\n          </Link>\n\n          <Box>\n            <Typography variant=\"body1\" color=\"inherit\">\n              List Photos\n            </Typography>\n          </Box>\n        </Breadcrumbs>\n        <Typography variant=\"h4\" color=\"textPrimary\">\n          All Photos\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n}\n\n\nexport default Header\n","export const sortOptions = [\n  {\n    value: \"created|desc\",\n    label: \"Creation date (newest first)\"\n  },\n  {\n    value: \"created|asc\",\n    label: \"Creation date (oldest first)\"\n  }\n]\n  \n","import React, { useState, } from \"react\"\nimport clsx from \"clsx\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport Table from \"@mui/joy/Table\"\nimport { Link } from \"react-router-dom\"\nimport {\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from \"react-feather\"\nimport {\n  Box,\n  Card,\n  InputAdornment,\n  IconButton,\n  SvgIcon,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n} from \"@mui/material\"\nimport Button from \"@mui/material/Button\"\nimport VisibilityIcon from \"@mui/icons-material/Visibility\"\nimport Dialog from \"@mui/material/Dialog\"\nimport DialogTitle from \"@mui/material/DialogTitle\"\nimport DialogContent from \"@mui/material/DialogContent\"\nimport DialogContentText from \"@mui/material/DialogContentText\"\nimport DialogActions from \"@mui/material/DialogActions\"\n\nimport {\n  sortOptions,\n\n} from \"../../../../others/helpers/InputPhotoOptions\"\nimport { applyFilters } from \"./TableResultsHelpers\"\n\nconst Results = ({ className, results, result, ...rest }) => {\n  const [page, setPage] = useState(0)\n  const [limit, setLimit] = useState(25)\n  const [query, setQuery] = useState(\"\")\n  const [sort, setSort] = useState(sortOptions[0].value)\n  const [isProfileDialogOpen, setIsProfileDialogOpen] = useState(false)\n  const [selectedResult, setSelectedResult] = useState(null)\n\n  const handleQueryChange = event => {\n    event.persist()\n    setQuery(event.target.value)\n  }\n\n  const handleSortChange = (event) => {\n    event.persist();\n    setSort(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleLimitChange = event => {\n    setLimit(parseInt(event.target.value))\n  }\n\n  const applyPagination = (results, page, limit) => {\n    const startIndex = page * limit\n    const endIndex = startIndex + limit\n    return results.slice(startIndex, endIndex)\n  }\n  const applySorting = (results, sortingOption) => {\n    const [field, order] = sortingOption.split(\"|\");\n    const apiFieldMap = {\n      created: \"created_at\",\n    };\n    const mappedField = apiFieldMap[field] || field;\n    return [...results].sort((a, b) => {\n      if (order === \"asc\") {\n        return a[mappedField].localeCompare(b[mappedField]);\n      } else {\n        return b[mappedField].localeCompare(a[mappedField]); \n      }\n    });\n  };\n  const filteredResults = applyFilters(results, query)\n  const paginatedResults = applyPagination(filteredResults, page, limit)\n  const sortedResults = applySorting(paginatedResults, sort);\n  \n  return (\n    <Card className={clsx(\"\", className)} {...rest}>\n      <Box p={2}>\n        <Box display=\"flex\" alignItems=\"center\">\n          <TextField\n            className=\"\"\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SvgIcon fontSize=\"small\" color=\"action\">\n                    <SearchIcon />\n                  </SvgIcon>\n                </InputAdornment>\n              )\n            }}\n            onChange={handleQueryChange}\n            placeholder=\"Search photographers\"\n            value={query}\n            variant=\"outlined\"\n          />\n          <Box flexGrow={1} />\n          <TextField\n            label=\"Sort By\"\n            name=\"sort\"\n            onChange={handleSortChange}\n            select\n            SelectProps={{ native: true }}\n            value={sort}\n            variant=\"outlined\"\n          >\n            {sortOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </TextField>\n        </Box>\n      </Box>\n\n      <PerfectScrollbar>\n        <Box minWidth={1200}>\n          <Table color=\"danger\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Photgrapher Name</TableCell>\n                <TableCell>Created at</TableCell>\n               \n                <TableCell>Photographer Portfolio</TableCell>\n                <TableCell> \n                  No. of likes\n                </TableCell>\n                <TableCell align=\"right\">Photo Detail</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {sortedResults\n                .map(result => {\n                  const handleProfileDialogOpen = selectedId => {\n                    setSelectedResult(selectedId)\n                    setIsProfileDialogOpen(true)\n                  }\n\n                  const handleProfileDialogClose = () => {\n                    setIsProfileDialogOpen(false)\n                  }\n\n                  return (\n                    <TableRow key={result.id}>\n                      <TableCell>               \n                        {result.user.name}\n                        <VisibilityIcon\n                          onClick={() => handleProfileDialogOpen(result.id)}\n                        />  \n                        </TableCell>\n                      <Dialog\n                        open={isProfileDialogOpen}\n                        onClose={handleProfileDialogClose}\n                      >\n                        <DialogTitle>Profile Details</DialogTitle>\n                        <DialogContent>\n                          <DialogContentText>\n                            <Box minWidth={700}>\n                              <Table>\n                                <TableHead>\n                                  <TableRow>\n                                    <TableCell>Profile name</TableCell>\n                                    <TableCell>Location</TableCell>\n                                    <TableCell>Total likes</TableCell>\n                                    <TableCell>Twitter</TableCell>\n                                    <TableCell>Portfolio</TableCell>\n                                    <TableCell>Profile Image</TableCell>\n                                  </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                {sortedResults\n                                  .filter(result => result.id === selectedResult)\n                                  .map((selectedResult,index) => {\n                                    return (\n                                      <TableRow key={index}>\n                                        <TableCell>\n                                          {selectedResult.user.name}\n                                        </TableCell>\n                                        <TableCell>\n                                          {selectedResult.user.location}\n                                        </TableCell>\n                                        <TableCell>{selectedResult.user.total_likes}</TableCell>\n                                        <TableCell>{selectedResult.user.twitter_username}</TableCell>\n                                        <TableCell>\n                                        <a\n                                          href={selectedResult.user.portfolio_url}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                        >\n                                          View Portfolio\n                                        </a>\n                                        </TableCell>\n                                        <TableCell>\n                                        <img\n                                          src={selectedResult.user.profile_image.medium}\n                                          alt=\"Profile\"\n                                          style={{ width: 32, height: 32 }}\n                                        />\n                                      </TableCell>\n                                      </TableRow>\n                                    )\n                                  })}\n                                </TableBody>\n                              </Table>\n                            </Box>\n                          </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                          <Button\n                            variant=\"contained\"\n                            className=\"\"\n                            color=\"secondary\"\n                            onClick={handleProfileDialogClose}\n                          >\n                            Close\n                          </Button>\n                        </DialogActions>\n                      </Dialog>\n                      <TableCell>\n                        {new Date(result.created_at).toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                      <a\n                      href={result.user.links.html}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                     View Photographer's Portfolio\n                    </a>\n                      </TableCell>\n                      <TableCell>\n                        {result.likes} likes\n                      </TableCell>\n\n                      <TableCell>\n                        <IconButton>\n                          <Link to={`/photos/${result.id}`}>  \n                            <ArrowRightIcon />\n                          </Link>\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  )\n                })}\n            </TableBody>\n          </Table>\n          <TablePagination\n            component=\"div\"\n            count={filteredResults.length}\n            onPageChange={handlePageChange}\n            onRowsPerPageChange={handleLimitChange}\n            page={page}\n            rowsPerPage={limit}\n            rowsPerPageOptions={[5, 10, 25]}\n          />\n        </Box>\n      </PerfectScrollbar>\n    </Card>\n  )\n}\n\nexport default Results","export const applyFilters = (results, query, filters) => {\n  return results.filter(result => {\n    let matches = true\n\n    if (query && !result.user.name.toLowerCase().includes(query.toLowerCase())) {\n      matches = false\n    }\n    return matches\n  })\n}\n\nexport const applyPagination = (results, page, limit) => {\n  return results.slice(page * limit, page * limit + limit)\n}\n\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n} from '@mui/material';\n\nimport Header from './Header';\nimport Results from './Results';\nimport Page from '../../../../components/Page';\n\nconst AccessKey = 'frZ-Ilry71ODyHtsn6W_XKAa77h3ZUjVph_bydlEPnw';\n\nconst UnsplashPhotos = () => {\n\n  const [photos, setPhotos] = useState([]);\n\n  useEffect(() => {\n    const fetchPhotos = async () => {\n      try {\n        const response = await fetch('https://api.unsplash.com/photos?page=1', {\n          headers: {\n            Authorization: `Client-ID ${AccessKey}`,\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setPhotos(data);\n        } else {\n          console.error('Error fetching photos:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching photos:', error.message);\n      }\n    };\n\n    fetchPhotos();\n  }, []);\n\n  return (\n    <Page title=\"Photo List\">\n      <div className=\"container mt-5\">\n      <Container maxWidth={false}>\n        <Header />\n      \n \n    {photos && (\n          <Box mt={3}>\n            <Results results={photos} />\n          </Box>\n        )}       \n      </Container>\n      </div>\n    </Page>\n  );\n};\n\n\n\nexport default UnsplashPhotos;\n"],"names":["forwardRef","_ref","ref","children","title","rest","_jsxs","_jsx","HelmetProvider","Helmet","className","Grid","container","spacing","justify","clsx","item","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","variant","color","to","component","RouterLink","Box","Typography","sortOptions","value","label","results","result","page","setPage","useState","limit","setLimit","query","setQuery","sort","setSort","isProfileDialogOpen","setIsProfileDialogOpen","selectedResult","setSelectedResult","filteredResults","applyFilters","filters","filter","matches","user","name","toLowerCase","includes","paginatedResults","applyPagination","startIndex","endIndex","slice","sortedResults","applySorting","sortingOption","field","order","split","mappedField","created","a","b","localeCompare","Card","p","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","position","SvgIcon","SearchIcon","onChange","event","persist","target","placeholder","flexGrow","select","SelectProps","native","map","option","PerfectScrollbar","minWidth","Table","TableHead","TableRow","TableCell","align","TableBody","handleProfileDialogClose","VisibilityIcon","onClick","handleProfileDialogOpen","selectedId","id","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","index","location","total_likes","twitter_username","href","portfolio_url","rel","src","profile_image","medium","alt","style","width","height","DialogActions","Button","Date","created_at","toLocaleString","links","html","likes","IconButton","concat","ArrowRightIcon","TablePagination","count","length","onPageChange","handlePageChange","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","UnsplashPhotos","photos","setPhotos","useEffect","async","response","fetch","headers","Authorization","ok","data","json","console","error","statusText","message","fetchPhotos","Page","Container","maxWidth","Header","mt","Results"],"sourceRoot":""}